docker.enabled         = true
docker.userEmulation   = true
docker.runOptions = '--platform linux/amd64'

includeConfig 'conf/base.config'

params {
snps_ref = 's3://dfci-cfchipseq-tower/ref_files/SNPs/SNPs.1e5.txt'
align_ref = 's3://dfci-cfchipseq-tower/ref_files/hg19/'
files_ref_genome = 's3://dfci-cfchipseq-tower/ref_files/hg19/hg19*.*'
gtf_ref = 's3://dfci-cfchipseq-tower/ref_files/hg19/gencode.v19.annotation.gtf'
DAC_Exclusion = 's3://dfci-cfchipseq-tower/ref_files/hg19/DAC_Exclusion.bed'
genes_pileup_report = 's3://dfci-cfchipseq-tower/ref_files/pileup_report/test_housekeeping.bed'
states_ref = 's3://dfci-cfchipseq-tower/ref_files/states'

pathEnrichmentScript = '${projectDir}/auxiliar_programs/enrichment.sh'
pathRfrag_plotFragDist = '${projectDir}/auxiliar_programs/frag_plotFragDist.R'
pathRComparison = '${projectDir}/auxiliar_programs/pileups_comparison.R'
pathRPileups = '${projectDir}/auxiliar_programs/read_pileups.R'
samples = 's3://dfci-cfchipseq-tower/sample_sheets/small-samples.csv'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
